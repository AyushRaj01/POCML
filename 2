import os
import csv
import subprocess
from datetime import datetime
from winrm import Session

# Read server list from file
server_list_path = r"C:\Temp\Servers.txt"
output_csv_path = r"C:\TEMP\Reboot_patching_log\Corp_RebootAndPatchingDetails.csv"
service_account_username = "local\\dell_process"
service_account_password = "abc@1223"

# Ensure the output directory exists
output_directory = os.path.dirname(output_csv_path)
os.makedirs(output_directory, exist_ok=True)

# Initialize results list
results = []

# Function to run a PowerShell command remotely
def invoke_command(server, username, password, command):
    try:
        session = Session(server, auth=(username, password), transport="ntlm")
        response = session.run_ps(command)
        if response.status_code == 0:
            return response.std_out.decode()
        else:
            raise Exception(f"Error: {response.std_err.decode()}")
    except Exception as e:
        print(f"Failed to connect to {server}: {e}")
        return None

# Script block to fetch details from the remote server
script_block = r"""
$osInfo = Get-WmiObject -Class Win32_OperatingSystem
$lastboottime = $osInfo.ConvertToDateTime($osInfo.LastBootUpTime)
$details = Get-HotFix | Sort-Object InstalledOn -Descending
$firstdate = $details | Select-Object -First 1
$latestdate = $firstdate.InstalledOn
$latestUpdates = $details | Where-Object { $_.InstalledOn -eq $latestdate }
$hotFixDetails = ($latestUpdates | ForEach-Object { "$($_.HotFixID) ($($_.Description))" }) -join ";"
[PSCustomObject]@{
    Computername = $env:COMPUTERNAME
    LastRebootdate = $lastboottime
    LatestPatchKB = $hotFixDetails
    LatestPatchDate = $latestdate
}
"""

# Process each server
with open(server_list_path, "r") as server_list_file:
    server_list = server_list_file.readlines()

for server in server_list:
    server = server.strip()
    print(f"Processing {server}...")
    data = invoke_command(server, service_account_username, service_account_password, script_block)
    if data:
        try:
            results.append(eval(data))
        except Exception as e:
            print(f"Error processing data from {server}: {e}")
    else:
        results.append({
            "Computername": server,
            "LastRebootdate": "Failed",
            "LatestPatchKB": "Failed",
            "LatestPatchDate": "Failed"
        })

# Export results to CSV
with open(output_csv_path, "w", newline="") as csvfile:
    fieldnames = ["Computername", "LastRebootdate", "LatestPatchKB", "LatestPatchDate"]
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows(results)

print(f"Details exported to CSV at {output_csv_path}")

